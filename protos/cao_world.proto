syntax = "proto3";

package cao_world;

import "cao_common.proto";

message Bounded
{
    int64 value = 1;
    int64 valueMax = 2;
}

message RoomTerrain
{
    cao_common.Axial roomId = 1;
    /// Returned tiles will have the same positions as in RoomLayout
    repeated Terrain tiles = 2;
}

enum Terrain {
    EMPTY = 0;
    PLAIN = 1;
    WALL = 2;
    BRIDGE = 3;
}

/// All rooms in the world will have the same terrain layout, described here
message RoomLayout
{
    repeated cao_common.Axial positions = 1;
}

message RoomList
{
    repeated cao_common.Axial room_ids = 1;
}

message RoomBots
{
    cao_common.Axial roomId = 1;
    repeated Bot bots = 2;
}

message RoomStructures
{
    cao_common.Axial roomId = 1;
    repeated Structure structures = 2;
}

message RoomResources
{
    cao_common.Axial roomId = 1;
    repeated Resource resources = 2;
}

message Bot
{
    int64 id = 1;
    cao_common.WorldPosition pos = 2;
    Bounded carry = 3;
    Bounded hp = 4;
    cao_common.Uuid script = 5;
    cao_common.Uuid owner = 6;
    uint32 meleeStrength = 7;
    Decay decay = 8;

    message Decay
    {
        int32 hpAmount = 1;
        int32 interval = 2;
        int32 timeRemaining = 3;
    }
}

message Structure
{
    int64 id = 1;
    cao_common.WorldPosition pos = 2;
    Bounded hp = 3;
    Bounded energy = 4;
    int64 energyRegen = 5;
    cao_common.Uuid owner = 7;

    oneof structure_type
    {
        Spawn spawn = 8;
    }

    message Spawn
    {
        int64 timeToSpawn = 1;
        int64 spawning = 2;
        repeated int64 spawnQueue = 3;
    }
}

message Resource
{
    int64 id = 1;
    cao_common.WorldPosition pos = 2;

    oneof resource_type
    {
        Bounded energy = 3;
    }
}

message Diagnostics
{
    Current current = 1;
    Accumulated accumulated = 2;

    message Current
    {
        uint64 tick = 1;
        int64 tick_latency_ms = 2;
        int64 scripts_execution_ms = 3;
        int64 systems_update_ms = 4;
        uint64 number_of_scripts_ran = 11;
        uint64 number_of_scripts_errored = 12;
        uint64 number_of_intents = 13;
    }

    message Accumulated
    {
        double tick_latency_mean = 8;
        double tick_latency_std = 9;
        int64 tick_latency_min = 5;
        int64 tick_latency_max = 7;
        uint64 tick_latency_count = 10;
    }
}

message WorldEntities
{
    int64 worldTime = 1;
    repeated RoomBots bots = 2;
    repeated RoomStructures structures = 3;
    repeated RoomResources resources = 4;
    Diagnostics diagnostics = 5;
}

message Empty { }

service World
{
    /// Stream the entities on updates
    rpc Entities(Empty) returns (stream WorldEntities) { }
    rpc GetRoomLayout(Empty) returns (RoomLayout) { }
    rpc GetRoomList(Empty) returns (RoomList) { }

    rpc GetRoomTerrain(cao_common.Axial) returns (RoomTerrain) { }
}
